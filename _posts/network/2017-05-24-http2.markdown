---
layout: post
title:  "HTTP2"
date:   2017-05-24 10:10:53 +0900
categories: HTTP2
---

# [HTTP2]  

HTTP는 1996년 처음 1.0 버전이 releas되었고 현재 많이 사용하는 1.1버전은 1999년에 나왔다.  
15년이나 된 녀석이다.  

현재의 WEB은 대량의 Multi Media 리소스를 처리 하고, 하나의 웹 페이지를 구성하기 위해 비동기 방식의 요청이 잦다.  
하지만 HTTP1.1은 느리다.  


<br><br><br>


### HTTP1.1의 동작 방식  
기본적으로 Connection당 하나의 요청을 처리 하도록 설계 되었다.  
동시 전송이 불가능,  
요청과 응답이 순차적이다.  

그렇다보니 하나만 밀려도 Latency가 길어진다.(Head Of Line Blocking = HOLB)  

게다가 Header에는 많은 메타정보가 포함되어 있어 무겁다.  
매 요청마다 중복된 헤더값을 전송해 비효울적이다.  
domain에 설정된 cookie정보도 매 요청마다 헤더에 포함되어 전송된다.  


<br><br><br>


### 성능 향상을 위해 그동안 했던 노력들  
- Image Spriting : 한 이미지 파일에 아이콘들을 모아놓고 css에서 좌표로 찾는 그거  
- Domain Sharding : 다수의 connection을 생성해 병렬로 요청을 보냄. 브라우저별로 개수 제한이 있음.
- Minify CSS/Javascript : 전송되는 데이터의 용량을 줄이기 위해 코드를 축소해왔다.
- Data URI Scheme : HTML내의 이미지 리소스를 Base64로 인코딩하여 직접 기술. (요청수가 줄어드니까)
- Load Faster : 스타일시트를 HTML 문서 상위에, 스크립트는 하위에 배치.

많은 시도를 하였지만 근본적으로 해결할 수 없었고 따라서 구글은 Latency관점에서 HTTP를 고속화한 SPDY라는 프로토콜을 구현했다.  
이것이 HTTP2에 참고가 되었다.  
SPDY는 올해 말까지만 지원되고 HTTP2로 변경될 예정인 것으로 보인다.  


<br><br><br>


### HTTP2  
- Multiplexed Streams : 하나의 Connection으로 여러개의 메시지를 주고 받을 수 있다. 순서 상관없이 Stream으로 주고 받는다. Keep-Alive, Pipelining의 개선
- Stream Prioritization : 리소스의 우선순위를 설정할 수 있다.
- Server Push : 클라이언트가 요청하지 않았음에도 리소스를 보낼 수 있다. PUSH_PROMISE
- Header Compression : Header Table, Huffman Encoding을 이용(=HPACK 압축방식), 중복된 Header는 index값만 전송하고 중복되지 않은 것은 Huffman Encoding 하여 전송한다.


<br><br><br>


### 마치며  
일반적으로 15~50%가 향상 되는 것으로 나타난다!

결국엔 클라이언트가 HTTP2를 지원하느냐가 중요한데, 우리가 가장 많이 사용하는 모바일 환경에서도 HTTP2를 지원하고 있다.  
자세한 것은 [지원 목록]을 참고하자.  
우리가 알만한 서비스 사이트들 다 지원하고 있다.  





[HTTP2]: http://www.popit.kr/나만-모르고-있던-http2/
[지원 목록]: http://caniuse.com/#feat=http2





<br><br><br>

{% highlight ruby %}
{% endhighlight %}
`
