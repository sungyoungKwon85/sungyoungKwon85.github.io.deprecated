---
layout: post
title:  "docker"
date:   2017-04-10 13:10:53 +0900
categories: docker
---

## [To see]
[To see]: http://jojoldu.tistory.com/139

##  [Docker]  
[Docker]: http://pyrasis.com/private/2014/11/30/publish-docker-for-the-really-impatient-book

http://pyrasis.com/book/DockerForTheReallyImpatient 링크의 내용을 요약 정리 한다.  

<br><br><br><br>

# 가상 머신  
Docker는 지금까지 사용해왔던 VMware 등의 가상 머신과 비슷합니다.  
가상 머신에 리눅스를 설치한 뒤 각종 서버 프로그램과 DB를 설치하고, 개발한 애플리케이션이나 웹사이트를 실행했습니다.   
상 머신 이미지를 여러 서버에 복사해서 실행하면 이미지 하나로 서버를 계속 만들어낼 수 있었습니다.  
서비스 형태로 제공되는 Amazon Web Services, Microsoft Azure, Google Cloud Platform을 사용하기도 합니다.  

가상 머신은 성능이 좋지 못한 것이 단점이었습니다.  

가상 머신 자체는 완전한 컴퓨터라 항상 게스트 OS를 설치해야 합니다.  
이미지 용량이 커집니다.  

오픈 소스 가상화 소프트웨어는 OS를 가상화하는 것에만 초점이 맞춰져 있어 배포와 관리 기능이 부족합니다.  
![VM 계층도](http://pyrasis.com/assets/images/DockerForTheReallyImpatientChapter01/5.png)  

<br><br>

# Docker  
`Docker`는 게스트 OS를 설치하지 않습니다.  
Docker 이미지에 서버 운영을 위한 프로그램과 라이브러리만 격리해서 설치할 수 있고, OS 자원(시스템 콜)은 호스트와 공유합니다.   

![Docker 계층도](http://pyrasis.com/assets/images/DockerForTheReallyImpatientChapter01/6.png)  

Docker는 하드웨어를 가상화하는 계층이 없기 때문에 메모리 접근, 파일시스템, 네트워크 속도가 가상 머신에 비해 월등히 빠릅니다.  
호스트와 거의 동일한 속도라 할 수 있습니다.  

이미지 생성과 배포에 특화된 기능을 제공합니다.   
Git에서 소스를 관리하는 것처럼 이미지 버전 관리 기능을 제공합니다.  

<br><br>

# Linux Container  
chroot는 파일시스템에서 루트 디렉터리(/)를 변경하는 명령입니다.  
chroot로 특정 디렉터리를 루트 디렉터리로 설정하면 chroot jail(감옥)이라는 환경이 생성되는데, chroot jail안에서는 바깥의 파일과 디렉터리에 접근할 수 없습니다.  
디렉터리 경로를 격리하기 때문에 서버 정보 유출과 피해를 최소화 하는데 주로 사용되었습니다.  
복잡합니다. 또한, 완벽한 가상 환경이 아니기 때문에 각종 제약이 많습니다.  
이후 리눅스는 LXC(LinuX Container)라는 시스템 레벨 가상화를 제공했습니다.  
LXC는 격리된 공간만 제공할 뿐 개발 및 서버 운영에 필요한 부가 기능이 부족했습니다.  

`Docker는 리눅스 커널의 cgroups와 namespaces를 기반으로 하여 이미지, 컨테이너 생성 및 관리 기능과 다양한 부가 기능을 제공합니다.`  
버전 0.9부터는 LXC를 대신하는 libcontainer를 개발하여 사용하고 있습니다.  
실행 옵션에 따라 libcontainer를 사용하지 않고 LXC를 사용할 수도 있습니다.  
![docker and libcontainer](http://pyrasis.com/assets/images/DockerForTheReallyImpatientChapter01/9.png)

<br><br>

# Docker Image and Container  
[Docker Image and Container]: http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter01/02

Docker는 이미지와 컨테이너라는 개념이 있습니다.  
먼저 베이스 이미지가 있는데, 리눅스 배포판의 유저랜드만 설치된 파일을 뜻합니다.   
또는, 리눅스 배포판 유저랜드에 Redis나 Nginx 등이 설치된 베이스 이미지도 있습니다.  
- OS는 메모리 사용을 기준으로 커널 공간과 유저 공간으로 나눌 수 있습니다. 여기서 유저 공간에서 실행되는 실행 파일과 라이브러리를 유저랜드(userland)라고 합니다.

<br>

Docker 이미지라고 하면 베이스 이미지에 필요한 프로그램과 라이브러리, 소스를 설치한 뒤 파일 하나로 만든 것을 말합니다.  
`Docker 이미지는 베이스 이미지에서 바뀐 부분(Δ)만 이미지로 생성하고, 실행할 때는 베이스 이미지와 바뀐 부분을 합쳐서 실행합니다.`    
![Docker image](http://pyrasis.com/assets/images/DockerForTheReallyImpatientChapter01/10.png)



Docker 컨테이너는 이미지를 실행한 상태입니다.   
운영체제로 보면 이미지는 실행 파일이고 컨테이너는 프로세스입니다.   
`서버 구성을 미리 해놓은 Docker 이미지를 사용하면 실행할 서버가 몇 개가 되든 손쉽게 해결할 수 있습니다.`

<br><br>

# [Install on Mac]
[Install on Mac]: http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter02/02

<br><br>

# [Docker 사용해보기]
[Docker 사용해보기]: http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter03

























































.
